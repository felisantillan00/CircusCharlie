/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jgame.gradle.CircusCharlie;

import com.entropyinteractive.*; //jgame
import jgame.gradle.FontManager;
import jgame.gradle.CircusCharlie.ObjetosGraficos.Niveles.*;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.*;
import java.io.*;

public class CircusCharlie extends JGame {
    public final static int HEIGHT = 600;
    public final static int WIDTH = 800;
    public static int nivel = 1;
    private int tempScore = 0;
    private double tempScoreX = 0;
    private double tempScoreY = 0;
    private long tempScoreStartTime = 0;
    private final long SCORE_DISPLAY_TIME = 1000; // tiempo en milisegundos que el puntaje se muestra en pantalla
    public static boolean inicioNivel = false;
    private static boolean gameover = false;
    private static boolean inicioBD = false;
    private Camara cam;
    private Fondo fondo;
    public static Charlie charlie;
    private static Nivel nivelActual;
    private boolean enPausa = false;
    private boolean pPresionado = false;
    private int puntos = 10000;
    private static Properties prop = new Properties();

    public static void main(String[] args) {
        CircusCharlie game = new CircusCharlie();
        game.run(1.0 / 60.0);
        System.exit(0);
    }

    public CircusCharlie() {
        // call game constructor
        super("AppCamaracharlie ", WIDTH, HEIGHT);
    }

    public void gameStartup() {
        if (!inicioBD) {
            new ScoreBD();
            inicioBD = true;
        }
        Log.info(getClass().getSimpleName(), "Starting up game");
        Mundo m = Mundo.getInstance();
        try {
            if (nivelActual == null) {
                nivelActual = new Nivel1(this);
            }
            cam.setRegionVisible(getWidth(), 480);
            m.setLimitesMundo(fondo.getWidth(), fondo.getHeight());
        } catch (Exception ex) {
            System.out.println("ERROR en gameStartup");
            ex.printStackTrace();
        }
    }

    public void setFondo(Fondo fondo) {
        this.fondo = fondo;
    }

    public void setCamara(Camara camara) {
        this.cam = camara;
    }

    public static void setCharlie(Charlie charlie) {
        CircusCharlie.charlie = charlie;
    }

    public void gameUpdate(double delta) {
        Timer timer = new Timer();
        if (charlie.getVida() == 0) {
            charlie.gameOver();
            if (!gameover) {
                ScoreBD.insert(PantallaInicioCC.nombreJugador, charlie.getScore());
                gameover = true;
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        try {
                            FXPlayer.EVENTO1.stop();
                            FXPlayer.EVENTO2.stop();
                            FXPlayer.EVENTO3.stop();
                            resetGame();
                            getFrame().dispose();
                            new Ranking();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }, 8000);
            }

        } else {
            if (!inicioNivel) {
                // FXPlayer.VICTORIA.stop();
                charlie.nivel(nivel);
                charlie.imagenNivel();
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        inicioNivel = true;
                    }
                }, 3000);
            } else {
                Keyboard keyboard = getKeyboard();
                if (keyboard.isKeyPressed(KeyEvent.VK_SPACE)) {
                    if (!pPresionado && inicioNivel) {
                        enPausa = !enPausa;
                        pPresionado = true;
                        charlie.detenerBonus();
                    }
                } else {
                    pPresionado = false;
                }
                if (!nivelActual.colisiono() && inicioNivel && !enPausa) {
                    charlie.continuarDescuento();
                    nivelActual.gameUpdate(delta, keyboard);
                    // aumenta la vida cada 10mil puntos
                    if (Score.getScore() > puntos && charlie.getVida() < 4) {
                        charlie.setVida(charlie.getVida() + 1);
                        puntos += 10000;
                    }
                }
            }
        }
    }

    public void gameDraw(Graphics2D g) {
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        Mundo m = Mundo.getInstance();
        g.translate(cam.getX(), cam.getY());
        fondo.display(g);
        m.display(g);
        nivelActual.gameDraw(g);
        g.translate(-cam.getX(), -cam.getY());
        charlie.displayScore(g);
        if (enPausa) {
            g.setColor(Color.WHITE);
            g.setFont(new Font("Pixel Emulator", Font.BOLD, 40));
            g.drawString("Pausa", WIDTH / 2 - 83, HEIGHT / 2);
        }
        displayTempScore(g);
    }
    public void gameShutdown() {}

    private void resetGame() {
        nivel = 1;
        inicioNivel = false;
        gameover = false;
        charlie.setVida(3);
        charlie.bonusPred();
        charlie.scorePred();
    }

    public static void changeState(Nivel state) {
        CircusCharlie.nivelActual = state;
    }

    public void displayTempScore(Graphics2D g) {
        FontManager.getInstance();
        if (tempScoreStartTime > 0) {
            long currentTime = System.currentTimeMillis();
            if (currentTime - tempScoreStartTime < SCORE_DISPLAY_TIME) {
                g.setColor(Color.WHITE);
                g.setFont(new Font("Pixel Emulator", Font.BOLD, 20));
                g.drawString("+" + tempScore, (int) tempScoreX, (int) tempScoreY);
            } else {
                tempScoreStartTime = 0;
            }
        }
    }

    public void setTempScore(int score, double x, double y) {
        this.tempScore = score;
        this.tempScoreX = x;
        this.tempScoreY = y;
        this.tempScoreStartTime = System.currentTimeMillis();
    }

    public static void inicioNivel(boolean b) {
        CircusCharlie.inicioNivel = b;
    }

    public static void setNivel(int nivelSiguiente) {
        CircusCharlie.nivel = nivelSiguiente;
    }

    public static int getNivel() {
        return nivel;
    }

    public Nivel getNivelActual() {
        return nivelActual;
    }

    public Charlie getCharlie() {
        return charlie;
    }

    public static void pantallaCompleta(String valor) {
        String resourseUrl = CircusCharlie.class.getProtectionDomain().getCodeSource().getLocation().getPath()
        + "/jgame.properties";
        System.out.println("Entro al writeProperties");
        try (OutputStream input = new FileOutputStream(resourseUrl)) {
            prop.setProperty("fullScreen", valor);
            prop.store(input, null);
            System.out.println(prop.getProperty("fullScreen"));
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error " + e);
        }
    }
}